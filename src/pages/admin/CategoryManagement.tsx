import React, { useState, useCallback, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Filter, Edit, Trash2, Plus, Tag, Eye, MoreHorizontal, ChevronUp, ChevronDown } from "lucide-react";
import { SearchInput } from "@/components/ui/search-input";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { useAdminCategories, useCategoryMutations, useCategoryRealtimeSubscription } from '@/hooks/useAdminCategories';
import { CategoryFilters, PaginationParams, EnhancedCategory } from '@/types/admin';
import { CategoryStatsCards } from '@/components/admin/CategoryStatsCards';
import { CategoryTableRow } from '@/components/admin/CategoryTableRow';
import { CategoryFormDialog } from '@/components/admin/CategoryFormDialog';
import { PageBoundary } from '@/components/system/PageBoundary';

// Helper function for debouncing
function debounce<T extends (...args: any[]) => any>(func: T, delay: number): (...args: Parameters<T>) => void {
  let timeoutId: ReturnType<typeof setTimeout>;
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
}

export default function CategoryManagement() {
  const { toast } = useToast();
  
  // State for filters and pagination
  const [filters, setFilters] = useState<CategoryFilters>({});
  const [pagination, setPagination] = useState<PaginationParams>({
    page: 1,
    limit: 25,
    offset: 0
  });
  
  // State for UI interactions
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<EnhancedCategory | null>(null);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [categoryToDelete, setCategoryToDelete] = useState<EnhancedCategory | null>(null);
  const [newCategory, setNewCategory] = useState({
    name: "",
    description: "",
    parent_id: null as string | null,
    icon: "",
    is_active: true,
    is_public: true
  });

  // Hooks
  const { categories, totalCount, totalPages, isLoading, error } = useAdminCategories(filters, pagination);
  const { createCategory, updateCategory, deleteCategory, reorderCategoriesRPC } = useCategoryMutations();
  
  // Real-time subscription
  useCategoryRealtimeSubscription();

  // Debounced search - fixed to prevent infinite loops
  useEffect(() => {
    const timer = setTimeout(() => {
      setFilters(prev => ({ ...prev, search: searchTerm || undefined }));
      setPagination(prev => ({ ...prev, page: 1, offset: 0 }));
    }, 300);
    
    return () => clearTimeout(timer);
  }, [searchTerm]);

  // Get parent categories for dropdown
  const parentCategories = categories.filter(cat => !cat.parent_id);

  const getStatusBadge = (isActive: boolean) => {
    return isActive ? (
      <Badge variant="default" className="bg-green-100 text-green-800">פעיל</Badge>
    ) : (
      <Badge variant="destructive">לא פעיל</Badge>
    );
  };

  const getVisibilityBadge = (isPublic: boolean) => {
    return isPublic ? (
      <Badge variant="outline">ציבורי</Badge>
    ) : (
      <Badge variant="secondary">מוסתר</Badge>
    );
  };

  const handleAddCategory = async () => {
    if (!newCategory.name.trim()) {
      toast({
        title: "שגיאה",
        description: "שם הקטגוריה הוא שדה חובה",
        variant: "destructive",
      });
      return;
    }
    
    try {
      await createCategory.mutateAsync({
        name: newCategory.name,
        description: newCategory.description || undefined,
        parent_id: newCategory.parent_id || undefined,
        icon: newCategory.icon || undefined,
        is_active: newCategory.is_active,
        is_public: newCategory.is_public,
        position: 0,
        slug: '' // Will be auto-generated by trigger
      });
      
      setNewCategory({
        name: "",
        description: "",
        parent_id: null,
        icon: "",
        is_active: true,
        is_public: true
      });
      setIsAddDialogOpen(false);
    } catch (error) {
      // Error handled by mutation
    }
  };

  const handleEditCategory = async () => {
    if (!selectedCategory || !newCategory.name.trim()) {
      toast({
        title: "שגיאה",
        description: "שם הקטגוריה הוא שדה חובה",
        variant: "destructive",
      });
      return;
    }
    
    try {
      await updateCategory.mutateAsync({
        id: selectedCategory.id,
        updates: {
          name: newCategory.name,
          description: newCategory.description || undefined,
          parent_id: newCategory.parent_id || undefined,
          icon: newCategory.icon || undefined,
          is_active: newCategory.is_active,
          is_public: newCategory.is_public
        }
      });
      
      setNewCategory({
        name: "",
        description: "",
        parent_id: null,
        icon: "",
        is_active: true,
        is_public: true
      });
      setSelectedCategory(null);
      setIsEditDialogOpen(false);
    } catch (error) {
      // Error handled by mutation
    }
  };

  const handleDeleteCategory = async (category: EnhancedCategory) => {
    try {
      await deleteCategory.mutateAsync(category.id);
      setIsDeleteDialogOpen(false);
      setCategoryToDelete(null);
    } catch (error) {
      // Error handled by mutation
    }
  };

  const handleToggleStatus = async (category: EnhancedCategory) => {
    try {
      await updateCategory.mutateAsync({
        id: category.id,
        updates: { is_active: !category.is_active }
      });
    } catch (error) {
      // Error handled by mutation
    }
  };

  const handleToggleVisibility = async (category: EnhancedCategory) => {
    try {
      await updateCategory.mutateAsync({
        id: category.id,
        updates: { is_public: !category.is_public }
      });
    } catch (error) {
      // Error handled by mutation
    }
  };

  const handleReorderCategory = async (category: EnhancedCategory, direction: 'up' | 'down') => {
    const currentIndex = categories.findIndex(c => c.id === category.id);
    if (currentIndex === -1) return;

    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= categories.length) return;

    // Create new order array
    const reorderedCategories = [...categories];
    [reorderedCategories[currentIndex], reorderedCategories[newIndex]] = 
    [reorderedCategories[newIndex], reorderedCategories[currentIndex]];

    try {
      await reorderCategoriesRPC.mutateAsync(reorderedCategories.map(c => c.id));
    } catch (error) {
      // Error handled by mutation
    }
  };

  const openEditDialog = (category: EnhancedCategory) => {
    setSelectedCategory(category);
    setNewCategory({
      name: category.name,
      description: category.description || "",
      parent_id: category.parent_id,
      icon: category.icon || "",
      is_active: category.is_active,
      is_public: category.is_public
    });
    setIsEditDialogOpen(true);
  };

  const openDeleteDialog = (category: EnhancedCategory) => {
    setCategoryToDelete(category);
    setIsDeleteDialogOpen(true);
  };

  const clearSearch = () => {
    setSearchTerm("");
    setFilters(prev => ({ ...prev, search: undefined }));
  };

  return (
    <>
      <PageBoundary
        isLoading={isLoading}
        isError={!!error}
        error={error}
        onRetry={() => window.location.reload()}
        isEmpty={!isLoading && categories.length === 0}
        empty={
          <Card className="p-6 text-center">
            <p className="text-muted-foreground">לא נמצאו קטגוריות</p>
          </Card>
        }
      >
        <div className="space-y-4 md:space-y-6 font-hebrew pb-safe">
      <div className="text-right flex justify-between items-center">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">ניהול קטגוריות</h1>
          <p className="text-muted-foreground text-sm md:text-base">ניהול קטגוריות ותגיות השירותים</p>
        </div>
        <Button onClick={() => setIsAddDialogOpen(true)} className="font-hebrew">
          <Plus className="h-4 w-4 ml-2" />
          הוספת קטגוריה
        </Button>
      </div>

      <CategoryFormDialog
        open={isAddDialogOpen}
        onOpenChange={setIsAddDialogOpen}
        formData={newCategory}
        onFormDataChange={setNewCategory}
        onSubmit={handleAddCategory}
        parentCategories={parentCategories}
        isLoading={createCategory.isPending}
        mode="add"
      />

      <CategoryFormDialog
        open={isEditDialogOpen}
        onOpenChange={setIsEditDialogOpen}
        formData={newCategory}
        onFormDataChange={setNewCategory}
        onSubmit={handleEditCategory}
        parentCategories={parentCategories}
        isLoading={updateCategory.isPending}
        mode="edit"
      />

      {/* Statistics Cards */}
      <CategoryStatsCards categories={categories} totalCount={totalCount} />

      {/* Categories Table */}
      <Card>
        <CardHeader>
          <div className="flex flex-col sm:flex-row gap-4 justify-between">
            <div className="flex-1 max-w-sm order-2 sm:order-1">
              <SearchInput
                placeholder="חיפוש קטגוריות..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onClear={clearSearch}
                className="text-right"
                dir="rtl"
              />
            </div>
            <div className="flex gap-2 order-1 sm:order-2">
              <Select 
                value={filters.is_active === undefined ? "all" : filters.is_active ? "true" : "false"} 
                onValueChange={(value) => {
                  const newValue = value === "all" ? undefined : value === "true";
                  setFilters(prev => ({ ...prev, is_active: newValue }));
                  setPagination(prev => ({ ...prev, page: 1, offset: 0 }));
                }}
              >
                <SelectTrigger className="w-[120px] text-right" dir="rtl">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">הכל</SelectItem>
                  <SelectItem value="true">פעיל</SelectItem>
                  <SelectItem value="false">לא פעיל</SelectItem>
                </SelectContent>
              </Select>
              <Select 
                value={filters.is_public === undefined ? "all" : filters.is_public ? "true" : "false"} 
                onValueChange={(value) => {
                  const newValue = value === "all" ? undefined : value === "true";
                  setFilters(prev => ({ ...prev, is_public: newValue }));
                  setPagination(prev => ({ ...prev, page: 1, offset: 0 }));
                }}
              >
                <SelectTrigger className="w-[120px] text-right" dir="rtl">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">הכל</SelectItem>
                  <SelectItem value="true">ציבורי</SelectItem>
                  <SelectItem value="false">מוסתר</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent className="overflow-x-auto">
          {isLoading ? (
            <div className="space-y-4">
              {/* Mobile skeleton */}
              <div className="block md:hidden space-y-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <Card key={i} className="p-4">
                    <div className="space-y-3">
                      <Skeleton className="h-6 w-3/4" />
                      <Skeleton className="h-4 w-full" />
                      <Skeleton className="h-4 w-1/2" />
                    </div>
                  </Card>
                ))}
              </div>
              {/* Desktop skeleton */}
              <div className="hidden md:block">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="text-right">שם</TableHead>
                      <TableHead className="text-right">תיאור</TableHead>
                      <TableHead className="text-right">קטגוריית אב</TableHead>
                      <TableHead className="text-right">ספקים</TableHead>
                      <TableHead className="text-right">מוצרים</TableHead>
                      <TableHead className="text-right">סטטוס</TableHead>
                      <TableHead className="text-right">נראות</TableHead>
                      <TableHead className="w-32">פעולות</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {Array.from({ length: 5 }).map((_, i) => (
                      <TableRow key={i}>
                        <TableCell><Skeleton className="h-4 w-20" /></TableCell>
                        <TableCell><Skeleton className="h-4 w-32" /></TableCell>
                        <TableCell><Skeleton className="h-4 w-16" /></TableCell>
                        <TableCell><Skeleton className="h-4 w-8" /></TableCell>
                        <TableCell><Skeleton className="h-4 w-8" /></TableCell>
                        <TableCell><Skeleton className="h-6 w-16" /></TableCell>
                        <TableCell><Skeleton className="h-6 w-16" /></TableCell>
                        <TableCell><Skeleton className="h-8 w-24" /></TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          ) : categories.length === 0 ? (
            <div className="text-center py-12">
              <Tag className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-medium text-muted-foreground mb-2">אין קטגוריות</h3>
              <p className="text-sm text-muted-foreground mb-4">
                {filters.search ? 'לא נמצאו קטגוריות התואמות לחיפוש' : 'טרם נוצרו קטגוריות במערכת'}
              </p>
              {!filters.search && (
                <Button onClick={() => setIsAddDialogOpen(true)} className="font-hebrew">
                  <Plus className="h-4 w-4 ml-2" />
                  צור קטגוריה ראשונה
                </Button>
              )}
            </div>
          ) : (
            <>
              {/* Mobile Cards */}
              <div className="block md:hidden space-y-4">
                {categories.map((category) => (
                  <Card key={category.id} className="p-4">
                    <div className="space-y-3 text-right">
                      <div className="flex justify-between items-start">
                        <div className="flex gap-2">
                          {getStatusBadge(category.is_active)}
                          {getVisibilityBadge(category.is_public)}
                        </div>
                        <div>
                          <h3 className="font-bold text-lg">{category.name}</h3>
                          {category.slug && (
                            <p className="text-xs text-muted-foreground">/{category.slug}</p>
                          )}
                        </div>
                      </div>
                      {category.description && (
                        <p className="text-sm text-muted-foreground">{category.description}</p>
                      )}
                      <div className="text-sm text-muted-foreground space-y-1">
                        <p><span className="font-medium">ספקים:</span> {category.supplier_count || 0}</p>
                        <p><span className="font-medium">מוצרים:</span> {category.product_count || 0}</p>
                        {category.parent_id && (
                          <p><span className="font-medium">קטגוריית אב:</span> 
                            {categories.find(c => c.id === category.parent_id)?.name || 'לא נמצא'}
                          </p>
                        )}
                      </div>
                      <div className="flex gap-2 flex-wrap">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="flex-1 font-hebrew min-w-[80px]"
                          onClick={() => openEditDialog(category)}
                        >
                          <Edit className="h-4 w-4 ml-2" />
                          עריכה
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="font-hebrew"
                          onClick={() => handleToggleStatus(category)}
                          disabled={updateCategory.isPending}
                        >
                          {category.is_active ? "השבת" : "הפעל"}
                        </Button>
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => openDeleteDialog(category)}
                          disabled={deleteCategory.isPending}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>

              {/* Desktop Table */}
              <div className="hidden md:block">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="text-right">שם</TableHead>
                      <TableHead className="text-right">תיאור</TableHead>
                      <TableHead className="text-right">קטגוריית אב</TableHead>
                      <TableHead className="text-right">ספקים</TableHead>
                      <TableHead className="text-right">מוצרים</TableHead>
                      <TableHead className="text-right">סטטוס</TableHead>
                      <TableHead className="text-right">נראות</TableHead>
                      <TableHead className="w-48">פעולות</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {categories.map((category, index) => (
                      <TableRow key={category.id}>
                        <TableCell className="text-right font-medium">
                          <div>
                            {category.name}
                            {category.slug && (
                              <div className="text-xs text-muted-foreground">/{category.slug}</div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-right max-w-xs">
                          <div className="truncate">{category.description || "-"}</div>
                        </TableCell>
                        <TableCell className="text-right">
                          {category.parent_id ? 
                            categories.find(c => c.id === category.parent_id)?.name || 'לא נמצא' : 
                            "-"
                          }
                        </TableCell>
                        <TableCell className="text-right">{category.supplier_count || 0}</TableCell>
                        <TableCell className="text-right">{category.product_count || 0}</TableCell>
                        <TableCell className="text-right">{getStatusBadge(category.is_active)}</TableCell>
                        <TableCell className="text-right">{getVisibilityBadge(category.is_public)}</TableCell>
                        <TableCell>
                          <div className="flex gap-1 justify-end">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleReorderCategory(category, 'up')}
                              disabled={index === 0 || reorderCategoriesRPC.isPending}
                              className="h-8 w-8 p-0"
                            >
                              <ChevronUp className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleReorderCategory(category, 'down')}
                              disabled={index === categories.length - 1 || reorderCategoriesRPC.isPending}
                              className="h-8 w-8 p-0"
                            >
                              <ChevronDown className="h-4 w-4" />
                            </Button>
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end" className="font-hebrew">
                                <DropdownMenuItem onClick={() => openEditDialog(category)} className="text-right">
                                  <Edit className="ml-2 h-4 w-4" />
                                  עריכה
                                </DropdownMenuItem>
                                <DropdownMenuItem 
                                  onClick={() => handleToggleStatus(category)}
                                  className="text-right"
                                >
                                  <Eye className="ml-2 h-4 w-4" />
                                  {category.is_active ? "השבת" : "הפעל"}
                                </DropdownMenuItem>
                                <DropdownMenuItem 
                                  onClick={() => handleToggleVisibility(category)}
                                  className="text-right"
                                >
                                  <Eye className="ml-2 h-4 w-4" />
                                  {category.is_public ? "הסתר" : "הצג"}
                                </DropdownMenuItem>
                                <DropdownMenuItem 
                                  onClick={() => openDeleteDialog(category)}
                                  className="text-right text-destructive focus:text-destructive"
                                >
                                  <Trash2 className="ml-2 h-4 w-4" />
                                  מחק
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </>
          )}

          {/* Pagination */}
          {!isLoading && categories.length > 0 && totalPages > 1 && (
            <div className="flex items-center justify-between pt-4">
              <div className="flex items-center gap-2">
                <span className="text-sm text-muted-foreground">
                  {pagination.offset + 1}-{Math.min(pagination.offset + pagination.limit, totalCount)} מתוך {totalCount}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1, offset: (prev.page - 2) * prev.limit }))}
                  disabled={pagination.page === 1}
                  className="font-hebrew"
                >
                  הקודם
                </Button>
                <span className="text-sm">
                  עמוד {pagination.page} מתוך {totalPages}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1, offset: prev.page * prev.limit }))}
                  disabled={pagination.page === totalPages}
                  className="font-hebrew"
                >
                  הבא
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  </PageBoundary>

  {/* Delete Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent className="font-hebrew">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-right">מחיקת קטגוריה</AlertDialogTitle>
            <AlertDialogDescription className="text-right">
              האם אתה בטוח שברצונך למחוק את הקטגוריה "{categoryToDelete?.name}"?
              {categoryToDelete?.children && categoryToDelete.children.length > 0 && (
                <span className="block mt-2 text-destructive">
                  שים לב: לקטגוריה זו יש תתי-קטגוריות. לא ניתן למחוק קטגוריה עם תתי-קטגוריות.
                </span>
              )}
              {(categoryToDelete?.supplier_count || 0) > 0 && (
                <span className="block mt-2 text-destructive">
                  שים לב: קיימים {categoryToDelete?.supplier_count} ספקים המשויכים לקטגוריה זו.
                </span>
              )}
              {(categoryToDelete?.product_count || 0) > 0 && (
                <span className="block mt-2 text-destructive">
                  שים לב: קיימים {categoryToDelete?.product_count} מוצרים המשויכים לקטגוריה זו.
                </span>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel className="font-hebrew">ביטול</AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => categoryToDelete && handleDeleteCategory(categoryToDelete)}
              disabled={deleteCategory.isPending}
              className="font-hebrew"
            >
              {deleteCategory.isPending ? 'מוחק...' : 'מחק'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}