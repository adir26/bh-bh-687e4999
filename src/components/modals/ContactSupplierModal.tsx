import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { MessageCircle, X } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { showToast } from '@/utils/toast';

interface ContactSupplierModalProps {
  isOpen: boolean;
  onClose: () => void;
  supplierId: string;
  supplierName: string;
}

export const ContactSupplierModal: React.FC<ContactSupplierModalProps> = ({
  isOpen,
  onClose,
  supplierId,
  supplierName
}) => {
  const { user } = useAuth();
  const [message, setMessage] = useState('');
  const [subject, setSubject] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) {
      showToast.error('יש להתחבר כדי לשלוח הודעה');
      return;
    }

    if (!message.trim()) {
      showToast.error('נא להזין הודעה');
      return;
    }

    setIsLoading(true);
    try {
      const { error } = await supabase
        .from('leads')
        .insert({
          client_id: user.id,
          supplier_id: supplierId,
          notes: `${subject ? subject + '\n\n' : ''}${message}`,
          status: 'new',
          lead_number: '' // Will be auto-generated by trigger
        });

      if (error) throw error;

      showToast.success('ההודעה נשלחה בהצלחה');
      setMessage('');
      setSubject('');
      onClose();
    } catch (error) {
      console.error('Error sending message:', error);
      showToast.error('שגיאה בשליחת ההודעה');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md mx-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <MessageCircle className="w-5 h-5" />
            יצירת קשר עם {supplierName}
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="subject">נושא (אופציונלי)</Label>
            <Input
              id="subject"
              value={subject}
              onChange={(e) => setSubject(e.target.value)}
              placeholder="נושא ההודעה"
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="message">הודעה *</Label>
            <Textarea
              id="message"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="פרט את הפנייה שלך..."
              rows={4}
              required
            />
          </div>
          
          <div className="flex gap-3 pt-4">
            <Button 
              type="submit" 
              className="flex-1"
              disabled={isLoading}
            >
              {isLoading ? 'שולח...' : 'שלח הודעה'}
            </Button>
            <Button 
              type="button" 
              variant="outline" 
              onClick={onClose}
              disabled={isLoading}
            >
              ביטול
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};